{"ast":null,"code":"import { ReplaySubject, forkJoin } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\n/**\r\n * Handled loading the external library ondemand into our app\r\n */\n\nexport class RazorPayService {\n  constructor(document) {\n    this.document = document;\n    this._loadedLibraries = {};\n  } // forkjoin parameters will grow when we are adding any new external library into app\n\n\n  lazyLoadLibrary(resourceURL) {\n    return forkJoin([this.loadScript(resourceURL)]);\n  }\n\n  loadScript(url) {\n    if (this._loadedLibraries[url]) {\n      return this._loadedLibraries[url].asObservable();\n    }\n\n    this._loadedLibraries[url] = new ReplaySubject();\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = url;\n\n    script.onload = () => {\n      this._loadedLibraries[url].next();\n\n      this._loadedLibraries[url].complete();\n    };\n\n    this.document.body.appendChild(script);\n    return this._loadedLibraries[url].asObservable();\n  }\n\n}\n\nRazorPayService.ɵfac = function RazorPayService_Factory(t) {\n  return new (t || RazorPayService)(i0.ɵɵinject(DOCUMENT));\n};\n\nRazorPayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RazorPayService,\n  factory: RazorPayService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\tal\\src\\app\\services\\razorPay.ts"],"names":[],"mappings":"AAUA,SAAS,aAAT,EAAoC,QAApC,QAAoD,MAApD;AACA,SAAS,QAAT,QAAyB,iBAAzB;;AAEA;;AAEG;;AAEH,OAAM,MAAO,eAAP,CAAsB;AAI1B,EAAA,WAAA,CAA+C,QAA/C,EAA4D;AAAb,SAAA,QAAA,GAAA,QAAA;AAFvC,SAAA,gBAAA,GAA0D,EAA1D;AAEyD,GAJvC,CAM1B;;;AACA,EAAA,eAAe,CAAC,WAAD,EAAY;AACzB,WAAO,QAAQ,CAAC,CACd,KAAK,UAAL,CAAgB,WAAhB,CADc,CAAD,CAAf;AAGD;;AAEO,EAAA,UAAU,CAAC,GAAD,EAAY;AAC5B,QAAI,KAAK,gBAAL,CAAsB,GAAtB,CAAJ,EAAgC;AAC9B,aAAO,KAAK,gBAAL,CAAsB,GAAtB,EAA2B,YAA3B,EAAP;AACD;;AAED,SAAK,gBAAL,CAAsB,GAAtB,IAA6B,IAAI,aAAJ,EAA7B;AAEA,UAAM,MAAM,GAAG,KAAK,QAAL,CAAc,aAAd,CAA4B,QAA5B,CAAf;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,iBAAd;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,GAAP,GAAa,GAAb;;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,MAAK;AACnB,WAAK,gBAAL,CAAsB,GAAtB,EAA2B,IAA3B;;AACA,WAAK,gBAAL,CAAsB,GAAtB,EAA2B,QAA3B;AACD,KAHD;;AAKA,SAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,MAA/B;AACA,WAAO,KAAK,gBAAL,CAAsB,GAAtB,EAA2B,YAA3B,EAAP;AACD;;AA/ByB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAIN,QAJM,C;AAIE,C;;;SAJjB,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EADF","sourcesContent":["/*\n  Authors : initappz (Rahul Jograna)\n  Website : https://initappz.com/\n  App Name : ionic 5 groceryee app\n  Created : 10-Sep-2020\n  This App Template Source code is licensed as per the\n  terms found in the Website https://initappz.com/license\n  Copyright and Good Faith Purchasers © 2020-present initappz.\n*/\nimport { Injectable, Inject } from '@angular/core';\nimport { ReplaySubject, Observable, forkJoin } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Handled loading the external library ondemand into our app\n */\n@Injectable({ providedIn: 'root' })\nexport class RazorPayService {\n\n  private _loadedLibraries: { [url: string]: ReplaySubject<any> } = {};\n\n  constructor(@Inject(DOCUMENT) private readonly document: any) { }\n\n  // forkjoin parameters will grow when we are adding any new external library into app\n  lazyLoadLibrary(resourceURL): Observable<any> {\n    return forkJoin([\n      this.loadScript(resourceURL)\n    ]);\n  }\n\n  private loadScript(url: string): Observable<any> {\n    if (this._loadedLibraries[url]) {\n      return this._loadedLibraries[url].asObservable();\n    }\n\n    this._loadedLibraries[url] = new ReplaySubject();\n\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = url;\n    script.onload = () => {\n      this._loadedLibraries[url].next();\n      this._loadedLibraries[url].complete();\n    };\n\n    this.document.body.appendChild(script);\n    return this._loadedLibraries[url].asObservable();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}